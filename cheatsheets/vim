# File management

:e              reload file
:q              quit
:q!             quit without saving changes
:w              write file
:w {file}       write new file
:x              write file and exit

# Movement

    k
  h   l         basic motion
    j

w               next start of word
W               next start of whitespace-delimited word
e               next end of word
E               next end of whitespace-delimited word
b               previous start of word
B               previous start of whitespace-delimited word
0               start of line
|		start of line
$               end of line
gg              go to first line in file
G               go to end of file
gk		move down one displayed line
gj		move up one displayed line

{		beginning of paragraph
}		end of paragraph

;		repeat t/T/f/F

ctrl-o		go back to last editing postion



# Insertion
#   To exit from insert mode use Esc or Ctrl-C
#   Enter insertion mode and:

a               append after the cursor
A               append at the end of the line
i               insert before the cursor
I               insert at the beginning of the line
o               create a new line under the cursor
O               create a new line above the cursor
R               enter insert mode but replace instead of inserting chars
:r {file}       insert from file
:r!ls		insert current directory structure into buffer

# Editing

u               undo
yy              yank (copy) a line
y{motion}       yank text that {motion} moves over
p               paste after cursor
P               paste before cursor
<Del> or x      delete a character
dd              delete a line
d{motion}       delete text that {motion} moves over


# Search and replace with the `:substitute` (aka `:s`) command

:s/foo/bar/		replace the first match of 'foo' with 'bar' on the current line only
:s/foo/bar/g		replace all matches (`g` flag) of 'foo' with 'bar' on the current line only
:%s/foo/bar/g		replace all matches of 'foo' with 'bar' in the entire file (`:%s`)
:%s/foo/bar/gc		ask to manually confirm (`c` flag) each replacement 
:127,215 s/foo/bar	substitute the first occurence of 'foo' into 'bar on each line between 127 and 215

:.,+21g/foo/d		delete any lines containing the string 'foo' from the current one through the next 21 lines
:.,$v/bar/d		from here to the end of the file, delete any lines which DO NOT contain the string 'bar'
:%s/w../&\r/gc		append a return to w**

# Location List/Quickfix Window
# The difference between Location list and quickfix list is that location list is local to current window, you can have as many location lists as windows
# quickfix window is global so you can't have more than one available at a time.
# There is a tutorial about location list and quickfix , https://medium.com/@lakshmankumar12/quickfix-and-location-list-in-vim-ca0292ac894d
# QuickFix and location list has the same command set with different prefix, 'c' for Quickfix, 'l' for location list
:copen			open QuickFix
:cnext			next quickfix item
:cne			cnext for short
:cprev			previous quickfix item
:cpr			cprev for short
:cc			quickfix current	
:cf <file>		open a quickfix list from file
:cclose			close quickfix window
:ccl			cclose in short

:lopen
:lnext
:lne			lnext for short
:lprev
:lpr			lprev for short

:lf <file>
:lclose
:lcl			lclose in short

CTRL + W + h/k/j/l	switch to next pane(location list)
:lvim foo % in foo.txt	create a location list for the window containing foo.txt
:lne			jump to next item in location list


# Buffer
:bn 			jump to next buffer
:bp 			jump to previous buffer
:bd 			unload current buffer with confirm	
:bd3 			unload buffer #3
:1,3bd 			unload buffer #1, #2, #3
:bw 			really delete the buffer file
:bl			blast
:b2			open buffer #2
:buffers		show all buffers, the same as ls
:ls 			show all buffers

	

# Global command
:[range]g/pattern/command	d:delete, m:move, t:copy, s:substitute, `:help ex-cmd` to check all ex command
:help ex-cmd 			check all ex command 

# Folding
l			unfold current fold 
zr			unfold all methods/blocks
zm			fold all methods/blocks 	
zi			switch folding on or off
za			toggle current fold open/closed
zc			close current fold
zR			open all folds
zM			close all folds
zv			expand folds to reveal cursor
zj			move down to top of next fold
zk			move up to bottom of previous fold


# encrypt file
:X			encrypt current file with password

# Preceding a motion or edition with a number repeats it 'n' times
# Examples:
50k         moves 50 lines up
2dw         deletes 2 words
5yy         copies 5 lines
42G         go to line 42

# Mark & Registers
ma		sets the 'a' mark to the current location
'a		moves to the beginning of the line containing the 'a' mark
`a		moves to the precise location of 'a' mark
y`a		copy(yank) to 'a' mark
d`a		cut to 'a' mark
:marks 		marks list

# essential of vi
https://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim

ma			mark current location as 'a' mark
'a			move to the beginning of line containing the 'a' mark
`a			move to the 'a' mark precise location
d`a			delete to 'a' mark
y`a			copy to 'a' mark
{d}			delete the whole paragraph
d}			delete to the end of paragraph
d{			delete to the beginning of paragraph
d/foo			cut from the current line to the next line containting 'foo'
y?bar			copy from the current line to the most recent line containing 'bar'
"add			cutting the current line into the 'a' register
"by/foo			yanking a copy of the text from here to the next line containing "foo" into 'b' register
"ap			pastes a copy of the 'a' register's contents into the text after the cursor
"bP			pastes a copy from 'b' to before the current line
3J			join the next three lines
d5}			delete from the current line through the end of the fifth paragraph down from here
:.,$j			from the current line to the last line, join them all into one line, '.' means current line, '$' means last line
:%			is synonymous with :1,$(all the lines)
:%j			join the whole file into one line
:... g			a prefix for 'globally' applying a subsequent command to all lines which match a pattern
:... v			applies such a command to all lines which do NOT match the give pattern('v' from 'conVerse')
:.,+21g/foo/d		delete any lines containing the string 'foo' from the current one through the next 21 lines
:.,$v/bar/d		from here to the end of the file, delete any lines which DO NOT contain the string 'bar'
:%g/foo/m$		move all 'foo' lines to the end of the file
:% g/^   /-1j		for every matching line, go up one line and join them, '-1' means go up 1 line
:%g/foo/s/bar/zzz/g	for every line containing 'foo' substitute all 'bar' with 'zzz'
:g/^/m0/		reverse the whole file one line by one line, every line move to line 0
:'a,'bg/foo/j		join any line containing the string foo to its subsequent line, if it lies between the lines between the 'a' and 'b' marks

:r foo 			inserts the contents of the file named 'foo' at the current line
:r!			reads the results of a command, '!' means execute external command
1,$!sort		sort the whole buffer


zt			put the current line to the top of screen
zz			put the current line to the middle of screen
zb			put the current line to the bottom of screen

:w bar			save as 'bar'
:$w foo			save last line to file 'foo'
.w foo			save current line to file 'foo'
:%s/w../&\r/gc		append a return to w**

# tutorials
1. http://blog.sina.com.cn/s/blog_46dac66f010005kw.html, 普通人的编辑利器——Vim
1. http://arch.pconline.com.cn//pcedu/soft/gj/photo/0609/877033.html , 程序员的编辑器 - Vim
1. vi is visual interface for short, 也就是说vi允许一次能看到一屏的文本而非一行，vi也因此得名
1. http://blog.csdn.net/huangkangying/article/details/50506640, Vim Global Command 用法(g命令)
