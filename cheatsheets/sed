# To replace all occurrences of "day" with "night" and write to stdout:
sed 's/day/night/g' file.txt

# To replace all occurrences of "day" with "night" within file.txt:
sed -i 's/day/night/g' file.txt

# To replace all occurrences of "day" with "night" on stdin:
echo 'It is daytime' | sed 's/day/night/g'

# To remove leading spaces
sed -i -r 's/^\s+//g' file.txt

# To remove empty lines and print results to stdout:
sed '/^$/d' file.txt

# To replace newlines in multiple lines
sed ':a;N;$!ba;s/\n//g'  file.txt

# sed [选项] ‘command’ 文件名称
# 选项部分，常见选项包括-n，-e，-i，-f，-r选项。
# sed [-nefr] [动作]
选项与参数：
-n ：使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN 的数据一般都会被列出到终端上。但如果加上 -n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。
-e ：直接在命令列模式上进行 sed 的动作编辑；
-f ：直接将 sed 的动作写在一个文件内， -f filename 则可以运行 filename 内的 sed 动作；
-r ：sed 的动作支持的是延伸型正规表示法的语法。(默认是基础正规表示法语法)
-i ：直接修改读取的文件内容，而不是输出到终端。
# command部分包括：[地址1，地址2] [函数] [参数(标记)]
# 基本子命令
# a, 在指定行下边插入指定行的内容。
# i, 在指定行上边插入指定行的内容。
# c, 把指定的行内容替换为自己需要的行内容。
# d, 删除指定的行内容，比较简单，更容易理解。
# y, 字符替换，可以替换多个字符，只能替换字符不能替换字符串，且不支持正则表达式，具体使用方法看例子。
# =, 讲行号打印出来
# 将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～
# r, 类似于a，也是将内容追加到指定行的后边，只不过r是将指定文件内容读取并追加到指定行下边。
# s, 替换子命令，是平时sed使用的最多的子命令，没有之一

sed ‘y/ab/AB/’ message # 把message中所有a字符替换为A符号，所有b字符替换为B符号。
sed 's/hello/A/' file.txt    # 修改file.txt的内容然后打印到屏幕，不保存文件。
sed '2,3s/hello/A/' file.txt    # 修改file.txt的内容然后打印到屏幕，不保存文件。
sed -i '' 's/hello/A/' file.txt # 直接修改file.txt内容, 注意-i后面有'', disable backup 用的，要不然在mac下这个命令会抛错:bad flag in substitute command: 'e'
sed -i.bak 's/hello/A/' file.txt # 把修改的内容保存到file.txt,同时备份原文件到file.txt.bak
sed -i '' '1,4d' shifenzheng.data.utf8.sql # 删除1,4行的内容
sed '1d;$d' file # 删除第一行和最后一行
time sed -i '' '/^print/d' shifenzheng.data.utf8.sql # 删除print打头的行
sed -n 10p file.txt #打印第10行的内容, -n表示不输出原文件，只输出命令执行后的结果, 动作p将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～

# Mac下面插入新航很奇葩, 要用\\然后加换行莱插入内容, 下面是把"gem 'acts-as-taggable-on'"加入到带":development"的行前面，每个匹配的行都做
# 还要注意命令要用双引号括起来，要不然会抛错，mac下面sed就是这么奇怪.
sed -i '' "/:development/ i\\
gem 'acts-as-taggable-on'
" Gemfile

